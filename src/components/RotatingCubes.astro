<canvas id="instanced-cubes"></canvas>

<style>
  #instanced-cubes {
    width: 100%;
    height: auto;
    aspect-ratio: 2/1;
  }
</style>

<script>
  import { mat4, vec3, vec4 } from "wgpu-matrix";

  import {
    cubeVertexArray,
    cubeVertexSize,
    cubeNormalOffset,
    cubeUVOffset,
    cubePositionOffset,
    cubeVertexCount,
  } from "../lib/cube";

  import instancedVertWGSL from "../shaders/instanced.vert.wgsl?raw";
  import vertexPositionColorWGSL from "../shaders/vertexPositionColor.frag.wgsl?raw";

  import texture from "../assets/cracks.png";

  // Set up WebGPU render context.
  const canvas: HTMLCanvasElement = document.querySelector("#instanced-cubes")!;
  const adapter = await navigator.gpu.requestAdapter();
  const device = await adapter?.requestDevice()!;
  const context = canvas.getContext("webgpu")!;
  const devicePixelRatio = window.devicePixelRatio;
  canvas.width = canvas.clientWidth * devicePixelRatio;
  canvas.height = canvas.clientHeight * devicePixelRatio;
  const presentationFormat = navigator.gpu.getPreferredCanvasFormat();
  context.configure({ device, format: presentationFormat });

  // Create a vertex buffer from the cube data.
  const verticesBuffer = device.createBuffer({
    size: cubeVertexArray.byteLength,
    usage: GPUBufferUsage.VERTEX,
    mappedAtCreation: true,
  });
  new Float32Array(verticesBuffer.getMappedRange()).set(cubeVertexArray);
  verticesBuffer.unmap();

  const pipeline = device.createRenderPipeline({
    layout: "auto",
    vertex: {
      module: device.createShaderModule({
        code: instancedVertWGSL,
      }),
      buffers: [
        {
          arrayStride: cubeVertexSize,
          attributes: [
            {
              // position
              shaderLocation: 0,
              offset: cubePositionOffset,
              format: "float32x4",
            },
            {
              // normal
              shaderLocation: 1,
              offset: cubeNormalOffset,
              format: "float32x4",
            },
            {
              // uv
              shaderLocation: 2,
              offset: cubeUVOffset,
              format: "float32x2",
            },
          ],
        },
      ],
    },
    fragment: {
      module: device.createShaderModule({
        code: vertexPositionColorWGSL,
      }),
      targets: [
        {
          format: presentationFormat,
        },
      ],
    },
    primitive: {
      topology: "triangle-list",

      // Backface culling since the cube is solid piece of geometry.
      // Faces pointing away from the camera will be occluded by faces
      // pointing toward the camera.
      cullMode: "back",
    },

    // Enable depth testing so that the fragment closest to the camera
    // is rendered in front.
    depthStencil: {
      depthWriteEnabled: true,
      depthCompare: "less",
      format: "depth24plus",
    },
  });

  const depthTexture = device.createTexture({
    size: [canvas.width, canvas.height],
    format: "depth24plus",
    usage: GPUTextureUsage.RENDER_ATTACHMENT,
  });

  // Fetch the image and upload it into a GPUTexture.
  let cubeTexture: GPUTexture;
  {
    const response = await fetch(texture.src);
    const imageBitmap = await createImageBitmap(await response.blob());

    cubeTexture = device.createTexture({
      size: [imageBitmap.width, imageBitmap.height, 1],
      format: "rgba8unorm",
      usage:
        GPUTextureUsage.TEXTURE_BINDING |
        GPUTextureUsage.COPY_DST |
        GPUTextureUsage.RENDER_ATTACHMENT,
    });
    device.queue.copyExternalImageToTexture(
      { source: imageBitmap },
      { texture: cubeTexture },
      [imageBitmap.width, imageBitmap.height],
    );
  }

  const matrixFloatCount = 4 * 4;
  const matrixSize = 4 * matrixFloatCount; // float32 is 4 bytes
  const xCount = 4;
  const yCount = 4;
  const numInstances = xCount * yCount;
  // We need to allocate enough space for all the matrices for each instance and the view-projection matrix.
  const uniformBufferSize = numInstances * matrixSize + matrixSize;

  const uniformBuffer = device.createBuffer({
    size: uniformBufferSize,
    usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,
  });
  const uniformValues = new Float32Array(uniformBufferSize / 4);
  const viewProjectionMatrixOffset = 0;
  const modelMatrixArrayOffset = matrixFloatCount;
  const viewProjectionMatrix = uniformValues.subarray(
    viewProjectionMatrixOffset,
    viewProjectionMatrixOffset + matrixFloatCount,
  );
  const modelMatrixArray = uniformValues.subarray(
    modelMatrixArrayOffset,
    modelMatrixArrayOffset + numInstances * matrixFloatCount,
  );

  const aspect = canvas.width / canvas.height;
  const projectionMatrix = mat4.perspective(
    (2 * Math.PI) / 5,
    aspect,
    1,
    100.0,
  );
  const camera = vec4.create(0, 0, 10, 1);
  const viewMatrix = mat4.create();

  // Create a sampler with linear filtering for smooth interpolation.
  const sampler = device.createSampler({
    magFilter: "linear",
    minFilter: "linear",
  });

  const uniformBindGroup = device.createBindGroup({
    label: "cubes",
    layout: pipeline.getBindGroupLayout(0),
    entries: [
      {
        binding: 0,
        resource: {
          buffer: uniformBuffer,
        },
      },
      {
        binding: 1,
        resource: sampler,
      },
      {
        binding: 2,
        resource: cubeTexture.createView(),
      },
    ],
  });

  const modelMatrices = new Array(numInstances);
  const step = 4.0;

  // Initialize the matrix data for every instance.
  let m = 0;
  for (let x = 0; x < xCount; x++) {
    for (let y = 0; y < yCount; y++) {
      modelMatrices[m] = mat4.translation(
        vec3.fromValues(
          step * (x - xCount / 2 + 0.5),
          step * (y - yCount / 2 + 0.5),
          0,
        ),
      );
      m++;
    }
  }

  const tmpMat4 = mat4.create();

  // Update the transformation matrix data for each instance.
  function updateModelMatrices() {
    const now = Date.now() / 1000;

    let m = 0,
      i = 0;
    for (let x = 0; x < xCount; x++) {
      for (let y = 0; y < yCount; y++) {
        mat4.rotate(
          modelMatrices[i],
          vec3.fromValues(
            Math.sin((x + 0.5) * now),
            Math.cos((y + 0.5) * now),
            0,
          ),
          1,
          tmpMat4,
        );

        modelMatrixArray.set(tmpMat4, m);

        i++;
        m += matrixFloatCount;
      }
    }
  }

  function frame() {
    updateModelMatrices();

    vec4.transformMat4(camera, mat4.rotationY(0.01), camera);
    mat4.lookAt(camera, vec3.create(0, 0, 0), vec3.create(0, 1, 0), viewMatrix);
    mat4.multiply(projectionMatrix, viewMatrix, viewProjectionMatrix);

    device.queue.writeBuffer(
      uniformBuffer,
      0,
      uniformValues.buffer,
      uniformValues.byteOffset,
      uniformValues.byteLength,
    );

    const renderPassDescriptor: GPURenderPassDescriptor = {
      colorAttachments: [
        {
          view: context.getCurrentTexture().createView(),
          clearValue: [0.5, 0.5, 0.5, 1.0],
          loadOp: "clear",
          storeOp: "store",
        },
      ],
      depthStencilAttachment: {
        view: depthTexture.createView(),
        depthClearValue: 1.0,
        depthLoadOp: "clear",
        depthStoreOp: "store",
      },
    };

    const commandEncoder = device.createCommandEncoder();
    const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);
    passEncoder.setPipeline(pipeline);
    passEncoder.setBindGroup(0, uniformBindGroup);
    passEncoder.setVertexBuffer(0, verticesBuffer);
    passEncoder.draw(cubeVertexCount, numInstances, 0, 0);
    passEncoder.end();
    device.queue.submit([commandEncoder.finish()]);

    requestAnimationFrame(frame);
  }
  requestAnimationFrame(frame);
</script>
